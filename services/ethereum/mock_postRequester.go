// Code generated by mockery v2.42.3. DO NOT EDIT.

package ethereum

import (
	io "io"
	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// mockPostRequester is an autogenerated mock type for the postRequester type
type mockPostRequester struct {
	mock.Mock
}

// Post provides a mock function with given fields: url, body
func (_m *mockPostRequester) Post(url string, body io.Reader) (*http.Response, error) {
	ret := _m.Called(url, body)

	if len(ret) == 0 {
		panic("no return value specified for Post")
	}

	var r0 *http.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(string, io.Reader) (*http.Response, error)); ok {
		return rf(url, body)
	}
	if rf, ok := ret.Get(0).(func(string, io.Reader) *http.Response); ok {
		r0 = rf(url, body)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(string, io.Reader) error); ok {
		r1 = rf(url, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newMockPostRequester creates a new instance of mockPostRequester. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockPostRequester(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockPostRequester {
	mock := &mockPostRequester{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
